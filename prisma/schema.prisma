generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_P_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  name               String
  employeeId         String               @unique
  phone              String
  isBlocked          Boolean              @default(false)
  password           String
  role               String               @default("user")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  alias              String               @unique
  processId          Int?
  attendances        Attendance[]
  closedLeads        Lead[]               @relation("leadCloser")
  createdLeads       Lead[]               @relation("leadByUser")
  verifiedLeads      Lead[]               @relation("leadVerifier")
  LeadCount          LeadCount[]
  Notification       Notification[]
  StatusChangeReason StatusChangeReason[]
  process            Process?             @relation(fields: [processId], references: [id])
}

model Process {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Lead      Lead[]
  plans     Plan[]
  User      User[]
}

model Plan {
  id        Int      @id @default(autoincrement())
  name      String
  processId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Lead      Lead[]
  process   Process? @relation(fields: [processId], references: [id])
}

model Holiday {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id       Int      @id @default(autoincrement())
  userId   Int?     @default(1)
  isLate   Boolean  @default(false)
  dateTime DateTime @default(now())
  user     User?    @relation(fields: [userId], references: [id])
}

model Appliance {
  id              Int      @id @default(autoincrement())
  name            String
  makeOfAppliance String
  age             Int
  leadId          Int
  lead            Lead     @relation(fields: [leadId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // Lead            Lead[]
}

model Lead {
  id                 Int                  @id @default(autoincrement())
  title              String
  firstName          String
  middleName         String?
  lastName           String
  centre             String
  address            String?
  city               String?
  pincode            String
  password           String?
  dateOfBirth        DateTime?
  phone              String
  processId          Int?
  planId             Int?
  closerId           Int?
  fee                Int?
  currency           String?
  bankName           String?
  accountName        String?
  sort               String?
  // applianceId        Int?
  statusId           Int?                 @default(1)
  saleDate           DateTime             @default(now())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  accountNumber      String?
  cardBankName       String?
  cardCvv            String?
  cardName           String?
  cardNumber         String?
  county             String?
  expiry             String?
  shift              String?
  leadByUserId       Int?
  verifierId         Int?
  paymentMethod      String?
  comment            String?
  poa                Boolean              @default(false)
  // appliance          Appliance?           @relation(fields: [applianceId], references: [id])
  closer             User?                @relation("leadCloser", fields: [closerId], references: [id])
  leadBy             User?                @relation("leadByUser", fields: [leadByUserId], references: [id])
  plan               Plan?                @relation(fields: [planId], references: [id])
  process            Process?             @relation(fields: [processId], references: [id])
  status             Status?              @relation(fields: [statusId], references: [id])
  verifier           User?                @relation("leadVerifier", fields: [verifierId], references: [id])
  StatusChangeReason StatusChangeReason[]
  Appliance          Appliance[]
}

model Status {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Lead      Lead[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  type      String
  userId    Int?
  saleDate  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
}

model LeadCount {
  id        Int      @id @default(autoincrement())
  count     Int      @default(0)
  date      Int
  month     Int
  year      Int
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])

  @@unique([date, month, year, userId], name: "uniqueDate")
}

model StatusChangeReason {
  id         Int      @id @default(autoincrement())
  reason     String
  userId     Int?
  leadId     Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fromStatus String?
  toStatus   String?
  lead       Lead?    @relation(fields: [leadId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])
}
